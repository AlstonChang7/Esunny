//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TapQuoteWrapperApi
{
    /// <summary>
    /// TapQuoteAPI 的回调通知接口。
    /// </summary>
    public class ITapQuoteAPINotify : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal ITapQuoteAPINotify(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ITapQuoteAPINotify obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~ITapQuoteAPINotify()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this)
            {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        TapQuoteWrapperPINVOKE.delete_ITapQuoteAPINotify(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        /// <summary>
        /// 系统登录过程回调。此函数为Login()登录函数的回调，调用Login()成功后建立了链路连接，然后API将向服务器发送登录认证信息，
        /// 登录期间的数据发送情况和登录的回馈信息传递到此回调函数中。该回调返回成功，说明用户登录成功。但是不代表API准备完毕。需要等到OnAPIReady才能进行查询与订阅请求。
        /// </summary>
        /// <param name="errorCode">返回错误码,0表示成功。</param>
        /// <param name="info">登陆应答信息，如果errorCode!=0，则info=NULL。</param>
        public virtual void OnRspLogin(int errorCode, TapAPIQuotLoginRspInfo info)
        {
            TapQuoteWrapperPINVOKE.ITapQuoteAPINotify_OnRspLogin(swigCPtr, errorCode, TapAPIQuotLoginRspInfo.getCPtr(info));
        }
        /// <summary>
        /// 通知用户API准备就绪。只有用户回调收到此就绪通知时才能进行后续的各种行情数据查询操作。此回调函数是API能否正常工作的标志。就绪后才可以进行后续正常操作
        /// </summary>
        public virtual void OnAPIReady()
        {
            TapQuoteWrapperPINVOKE.ITapQuoteAPINotify_OnAPIReady(swigCPtr);
        }

        /// <summary>
        /// API和服务失去连接的回调；在API使用过程中主动或者被动与服务器服务失去连接后都会触发此回调通知用户与服务器的连接已经断开。
        /// </summary>
        /// <param name="reasonCode">断开原因代码。具体原因请参见错误码列表</param>
        public virtual void OnDisconnect(int reasonCode)
        {
            TapQuoteWrapperPINVOKE.ITapQuoteAPINotify_OnDisconnect(swigCPtr, reasonCode);
        }
        /// <summary>
        /// 返回所有品种信息。此回调接口用于向用户返回得到的所有品种信息。
        /// </summary>
        /// <param name="sessionID">请求的会话ID</param>
        /// <param name="errorCode">错误码，当errorCode!=0时,info为NULL；</param>
        /// <param name="isLast">标示是否是最后一批数据；</param>
        /// <param name="info">返回的信息；不要修改和删除info所指示的数据；函数调用结束，参数不再有效。</param>
        public virtual void OnRspQryCommodity(uint sessionID, int errorCode, char isLast, TapAPIQuoteCommodityInfo info)
        {
            TapQuoteWrapperPINVOKE.ITapQuoteAPINotify_OnRspQryCommodity(swigCPtr, sessionID, errorCode, isLast, TapAPIQuoteCommodityInfo.getCPtr(info));
        }
        /// <summary>
        /// 返回系统中合约信息
        /// </summary>
        /// <param name="sessionID">请求的会话ID；</param>
        /// <param name="errorCode">错误码，当errorCode!=0时,info为NULL；</param>
        /// <param name="isLast">标示是否是最后一批数据；</param>
        /// <param name="info">指向返回的信息结构体。当errorCode不为0时，info为空。不要修改和删除info所指示的数据；函数调用结束，参数不再有效。</param>
        public virtual void OnRspQryContract(uint sessionID, int errorCode, char isLast, TapAPIQuoteContractInfo info)
        {
            TapQuoteWrapperPINVOKE.ITapQuoteAPINotify_OnRspQryContract(swigCPtr, sessionID, errorCode, isLast, TapAPIQuoteContractInfo.getCPtr(info));
        }
        /// <summary>
        /// 返回订阅行情的全文。此回调接口用来返回订阅行情的全文。全文为当前时间的行情信息。
        /// </summary>
        /// <param name="sessionID">请求的会话ID；</param>
        /// <param name="errorCode">错误码，当errorCode!=0时,info为NULL；</param>
        /// <param name="isLast">标示是否是最后一批数据；</param>
        /// <param name="info">指向返回的信息结构体。当errorCode不为0时，info为空。不要修改和删除info所指示的数据；函数调用结束，参数不再有效。</param>
        public virtual void OnRspSubscribeQuote(uint sessionID, int errorCode, char isLast, TapAPIQuoteWhole info)
        {
            TapQuoteWrapperPINVOKE.ITapQuoteAPINotify_OnRspSubscribeQuote(swigCPtr, sessionID, errorCode, isLast, TapAPIQuoteWhole.getCPtr(info));
        }
        /// <summary>
        /// 退订指定合约的行情的结果回调
        /// </summary>
        /// <param name="sessionID">请求的会话ID；</param>
        /// <param name="errorCode">错误码，当errorCode!=0时,info为NULL；</param>
        /// <param name="isLast">标示是否是最后一批数据；</param>
        /// <param name="info">指向返回的信息结构体。当errorCode不为0时，info为空。不要修改和删除info所指示的数据；函数调用结束，参数不再有效。</param>
        public virtual void OnRspUnSubscribeQuote(uint sessionID, int errorCode, char isLast, TapAPIContract info)
        {
            TapQuoteWrapperPINVOKE.ITapQuoteAPINotify_OnRspUnSubscribeQuote(swigCPtr, sessionID, errorCode, isLast, TapAPIContract.getCPtr(info));
        }
        /// <summary>
        /// 返回订阅行情的变化内容。此回调接口用来通知用户行情信息产生了变化，并向用户提交新的行情全文。
        /// </summary>
        /// <param name="info">最新的行情全文内容；不要修改和删除Quote指示的数据；函数调用结束，参数不再有效。</param>
        public virtual void OnRtnQuote(TapAPIQuoteWhole info)
        {
            TapQuoteWrapperPINVOKE.ITapQuoteAPINotify_OnRtnQuote(swigCPtr, TapAPIQuoteWhole.getCPtr(info));
        }

        public ITapQuoteAPINotify() : this(TapQuoteWrapperPINVOKE.new_ITapQuoteAPINotify(), true)
        {
            SwigDirectorConnect();
        }

        private void SwigDirectorConnect()
        {
            if (SwigDerivedClassHasMethod("OnRspLogin", swigMethodTypes0))
                swigDelegate0 = new SwigDelegateITapQuoteAPINotify_0(SwigDirectorOnRspLogin);
            if (SwigDerivedClassHasMethod("OnAPIReady", swigMethodTypes1))
                swigDelegate1 = new SwigDelegateITapQuoteAPINotify_1(SwigDirectorOnAPIReady);
            if (SwigDerivedClassHasMethod("OnDisconnect", swigMethodTypes2))
                swigDelegate2 = new SwigDelegateITapQuoteAPINotify_2(SwigDirectorOnDisconnect);
            if (SwigDerivedClassHasMethod("OnRspQryCommodity", swigMethodTypes3))
                swigDelegate3 = new SwigDelegateITapQuoteAPINotify_3(SwigDirectorOnRspQryCommodity);
            if (SwigDerivedClassHasMethod("OnRspQryContract", swigMethodTypes4))
                swigDelegate4 = new SwigDelegateITapQuoteAPINotify_4(SwigDirectorOnRspQryContract);
            if (SwigDerivedClassHasMethod("OnRspSubscribeQuote", swigMethodTypes5))
                swigDelegate5 = new SwigDelegateITapQuoteAPINotify_5(SwigDirectorOnRspSubscribeQuote);
            if (SwigDerivedClassHasMethod("OnRspUnSubscribeQuote", swigMethodTypes6))
                swigDelegate6 = new SwigDelegateITapQuoteAPINotify_6(SwigDirectorOnRspUnSubscribeQuote);
            if (SwigDerivedClassHasMethod("OnRtnQuote", swigMethodTypes7))
                swigDelegate7 = new SwigDelegateITapQuoteAPINotify_7(SwigDirectorOnRtnQuote);
            TapQuoteWrapperPINVOKE.ITapQuoteAPINotify_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7);
        }

        private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes)
        {
            global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
            bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ITapQuoteAPINotify));
            return hasDerivedMethod;
        }

        private void SwigDirectorOnRspLogin(int errorCode, global::System.IntPtr info)
        {
            OnRspLogin(errorCode, (info == global::System.IntPtr.Zero) ? null : new TapAPIQuotLoginRspInfo(info, false));
        }

        private void SwigDirectorOnAPIReady()
        {
            OnAPIReady();
        }

        private void SwigDirectorOnDisconnect(int reasonCode)
        {
            OnDisconnect(reasonCode);
        }

        private void SwigDirectorOnRspQryCommodity(uint sessionID, int errorCode, char isLast, global::System.IntPtr info)
        {
            OnRspQryCommodity(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIQuoteCommodityInfo(info, false));
        }

        private void SwigDirectorOnRspQryContract(uint sessionID, int errorCode, char isLast, global::System.IntPtr info)
        {
            OnRspQryContract(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIQuoteContractInfo(info, false));
        }

        private void SwigDirectorOnRspSubscribeQuote(uint sessionID, int errorCode, char isLast, global::System.IntPtr info)
        {
            OnRspSubscribeQuote(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIQuoteWhole(info, false));
        }

        private void SwigDirectorOnRspUnSubscribeQuote(uint sessionID, int errorCode, char isLast, global::System.IntPtr info)
        {
            OnRspUnSubscribeQuote(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIContract(info, false));
        }

        private void SwigDirectorOnRtnQuote(global::System.IntPtr info)
        {
            OnRtnQuote((info == global::System.IntPtr.Zero) ? null : new TapAPIQuoteWhole(info, false));
        }

        public delegate void SwigDelegateITapQuoteAPINotify_0(int errorCode, global::System.IntPtr info);
        public delegate void SwigDelegateITapQuoteAPINotify_1();
        public delegate void SwigDelegateITapQuoteAPINotify_2(int reasonCode);
        public delegate void SwigDelegateITapQuoteAPINotify_3(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
        public delegate void SwigDelegateITapQuoteAPINotify_4(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
        public delegate void SwigDelegateITapQuoteAPINotify_5(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
        public delegate void SwigDelegateITapQuoteAPINotify_6(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
        public delegate void SwigDelegateITapQuoteAPINotify_7(global::System.IntPtr info);

        private SwigDelegateITapQuoteAPINotify_0 swigDelegate0;
        private SwigDelegateITapQuoteAPINotify_1 swigDelegate1;
        private SwigDelegateITapQuoteAPINotify_2 swigDelegate2;
        private SwigDelegateITapQuoteAPINotify_3 swigDelegate3;
        private SwigDelegateITapQuoteAPINotify_4 swigDelegate4;
        private SwigDelegateITapQuoteAPINotify_5 swigDelegate5;
        private SwigDelegateITapQuoteAPINotify_6 swigDelegate6;
        private SwigDelegateITapQuoteAPINotify_7 swigDelegate7;

        private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(int), typeof(TapAPIQuotLoginRspInfo) };
        private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { };
        private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(int) };
        private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPIQuoteCommodityInfo) };
        private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPIQuoteContractInfo) };
        private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPIQuoteWhole) };
        private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPIContract) };
        private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(TapAPIQuoteWhole) };
    }

}
