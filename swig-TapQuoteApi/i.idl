/* File : example.i */
%module(directors="1") TapQuoteWrapper
%{
#include "../VCH/stdexcept"
#include "../TapQuoteWrapperApi/TapApi/include/TapAPICommDef.h"  
#include "../TapQuoteWrapperApi/TapApi/include/TapQuoteAPIDataType.h" 
#include "../TapQuoteWrapperApi/TapApi/include/TapAPIError.h"  	
#include "../TapQuoteWrapperApi/TapApi/include/TapQuoteAPI.h"  
%}

/* turn on director wrapping Callback */
%feature("director") ITapQuoteAPINotify;

%include "csharp.swg"
%include "carrays.i"
%include "windows.i"
%include "typemaps.i"
%include "arrays_csharp.i"

%apply double OUTPUT[] { double* array1};

%apply unsigned long long OUTPUT[] { unsigned long long* array2};

%ignore TapAPIQuoteWhole::QBidPrice;
%ignore TapAPIQuoteWhole::QBidQty;
%ignore TapAPIQuoteWhole::QAskPrice;
%ignore TapAPIQuoteWhole::QAskQty;
%extend TapAPIQuoteWhole
{
	#define countof(arr) sizeof(arr) / sizeof(arr[0])
public:
	int QBidPriceSize()
	{
		return countof($self->QBidPrice);
	}

	void GetQBidPrice(double* array1, int size)
	{
		auto sourceSize = countof($self->QBidPrice);
		if (size < sourceSize)
		std::runtime_error("Initialize target array to appropriate size: "+ sourceSize);
		std::memcpy(reinterpret_cast<void*>(&array1[0]), reinterpret_cast<void*>(&$self->QBidPrice[0]), sizeof(double)*sourceSize);
	}
	
	int QBidQtySize()
	{
		return countof($self->QBidQty);
	}

	void GetQBidQty(unsigned long long* array2, int size)
	{
		auto sourceSize = countof($self->QBidQty);
		if (size < sourceSize)
		std::runtime_error("Initialize target array to appropriate size: "+ sourceSize);
		std::memcpy(reinterpret_cast<void*>(&array2[0]), reinterpret_cast<void*>(&$self->QBidQty[0]), sizeof(unsigned long long)*sourceSize);
	}
	
	int QAskPriceSize()
	{
		return countof($self->QAskPrice);
	}

	void GetQAskPrice(double* array1, int size)
	{
		auto sourceSize = countof($self->QAskPrice);
		if (size < sourceSize)
		std::runtime_error("Initialize target array to appropriate size: "+ sourceSize);
		std::memcpy(reinterpret_cast<void*>(&array1[0]), reinterpret_cast<void*>(&$self->QAskPrice[0]), sizeof(double)*sourceSize);
	}
	
	int QAskQtySize()
	{
		return countof($self->QAskQty);
	}

	void GetQAskQty(unsigned long long* array2, int size)
	{
		auto sourceSize = countof($self->QAskQty);
		if (size < sourceSize)
		std::runtime_error("Initialize target array to appropriate size: "+ sourceSize);
		std::memcpy(reinterpret_cast<void*>(&array2[0]), reinterpret_cast<void*>(&$self->QAskQty[0]), sizeof(unsigned long long)*sourceSize);
	}
}

%apply unsigned int *INPUT  { TAPIUINT32 *sessionID}
%apply unsigned int *OUTPUT { TAPIUINT32 *sessionID }; 

%typemap(csin) TAPIUINT32 *sessionID %{out $csinput%} 
%typemap(cstype) TAPIUINT32 *sessionID "out uint";

%typemap(imtype) TAPIINT32 &iResult "out int"
%typemap(csin) TAPIINT32 &iResult %{out $csinput%} 
%typemap(cstype) TAPIINT32 &iResult "out int";

/*
%array_class(double, doubleArray);
%array_class(unsigned long long, longArray);
*/

%typemap(csclassmodifiers) TapAPIQuoteWhole "public partial class"


/*
%apply int { ITapTrade::TAPIUINT32 *sessionID }
%typemap(cstype) ITapTrade::TAPIUINT32 *sessionID "out uint";
%apply unsigned int { TAPIUINT32 *sessionID }
%typemap(cstype) TAPIUINT32 *sessionID "out uint"  
*/

/*
%apply int { TAPIUINT32 *sessionID }
%typemap(cstype) TAPIUINT32 *sessionID "out uint";
*/

/*
%array_class(long, longArray);
%apply double *{ TAPIQPRICE					QBidPrice[20] };
%typemap(cstype) TAPIQPRICE					QBidPrice[20] "double[]";
%apply double INPUT[]{ TAPIQPRICE					QBidPrice[20] };

%apply double OUTPUT[]  {TAPIQPRICE					QBidPrice[20]};
%apply int INPUT[]  {TAPIQVOLUME					QBidQty[20]};
%apply double INPUT[]  {TAPIQPRICE					QAskPrice[20]};
%apply int INPUT[]  {TAPIQVOLUME					QAskQty[20]};
*/

%include "../TapQuoteWrapperApi/TapApi/include/TapAPICommDef.h"
%include "../TapQuoteWrapperApi/TapApi/include/TapQuoteAPIDataType.h"
%include "../TapQuoteWrapperApi/TapApi/include/TapAPIError.h"
%include "../TapQuoteWrapperApi/TapApi/include/TapQuoteAPI.h"
